import numpy as np
import h5py
import os
from PyQt5.QtWidgets import (QWidget, QToolTip,
    QPushButton, QApplication, QMessageBox, QDesktopWidget,QMainWindow,
QAction, qApp, QMenu, QTreeWidget, QVBoxLayout, QLabel,
                QTableWidget, QTreeWidgetItem, QTableWidgetItem, QInputDialog, QFileDialog
)
from PyQt5.QtGui import QFont ,  QIcon
from PyQt5.QtCore import Qt, pyqtSlot,QSize
from PyQt5 import QtCore, QtGui
import logging
logger = logging.getLogger(__name__)
try:
    from py4xs.hdf import h5exp,h5xs,lsh5
    from py4xs.data2d import Data2d,Axes2dPlot,DataType
except:
    logger.warning('The package py4xs is not installed. Please contact LIX beamline for more information.' )


class aboutWindow(QMessageBox):
    def __init__(self, parent=None):
        super(aboutWindow, self).__init__(parent)
        self.setWindowTitle('About XSH5View')
        self.setText('''
This is a working project for the development of GUI for the visulization of HDF files.
Ver0: Developed by Dr. Yugang Zhang@CHX, NSLS-II
    This version is dedicated to view XPCS results in a particluar HDF format generated by pyCHX package developed at CHX beamline, NSLS-II, BNL.
    The bottons designed for XPCS include plot_g2, show_C12, etc.
Ver1: Collaborated with Dr. JiLiang Liu@LIX, NSLS-II 
    This version applies for the visulizaiton of a general HDF format, such as LIX h5 format and CFN scattering data format
    Developed plot wedges specific to different data format, which can be selected by an option button
Ver2: Amended by Gabrielle Jones, 2020 GEM Fellow
    This version expands upon the previous developments by Dr. Zhang and Dr. Liu.
    Added plot library options, data labels, and toolbar to interact with plots, if using the default matplotlib library. Added file removal, file creation, and file manipulation within the application.

Please contact Dr. Yugang Zhang by yuzhang@bnl.gov, Dr. Jiliang Liu by jiliang@bnl.gov, or Gabrielle Jones by gjones@bnl.gov for more information.
NOTE: We are not responsible for any issues that may arise from the use of this code, including any loss of data etc.
        ''')

class plotOptionWindow(QWidget):
    def __init__(self, parent=None):
        super(plotOptionWindow, self).__init__(parent)
        self.setWindowTitle('Plot Options')

class tree(QWidget):
    '''Copied from Jiliang's Github:
        https://github.com/ligerliu/pyH5_GUI/blob/master/pyH5_GUI/NewTree.py
    '''
    (FILE,FILE_PATH,H5GROUP) = range(3)
    def __init__(self):
        super().__init__()
        self.title = 'Tree of h5 data'
        self.left = 10
        self.top = 10
        self.width = 720
        self.height = 640

        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        self.datalayout= QVBoxLayout()
        self.tree = QTreeWidget()
        header = QTreeWidgetItem(['File'])
        self.tree.setHeaderItem(header)
        self.datalayout.addWidget(self.tree)
        self.group_root = None
        self.file_array = []
    
    def clear(self):
        self.tree.clear()
        
    def add_group( self, group):          
        self.group_name =  os.path.basename(  group    )
        self.group_file_path = group  
        self.group_root = QTreeWidgetItem(self.tree,[self.group_name,self.group_file_path,''])           

    def add_file(self,h5file, group = None ):
        self.h5_file_path = h5file
        self.f = h5py.File(h5file,'r')
        self.filename = self.f.filename.split('/')[-1]
        self.file_array.append(self.filename)
        #print("Just added", self.filename, "to the file list array")
        if group is None:
            self.tree_root = QTreeWidgetItem(self.tree,[self.filename,self.h5_file_path,'']) 
            self.add_branch(self.tree_root,self.f)
        else:
            #print('add group here')
            if self.group_root is None:
                self.add_group( group )      
            hdf_branch =  QTreeWidgetItem( [self.filename,  self.h5_file_path,''] )
            #print( self.filename,self.h5_file_path )  
            self.group_root.addChild(  hdf_branch  )  
            
            self.add_branch( hdf_branch ,  self.f)
        self.tree.setColumnWidth(0,250)
        self.tree.setColumnWidth(1,0)
        self.tree.setColumnWidth(2,0)
        self.f.close()

    def add_branch(self,tree_root,h5file):
        for _ in h5file.keys():
            #print(_)
            #print("This branch has these arguments")
            #print("\t", str(h5file[_].name).split('/')[-1])#This is the 'leaf' name
            #print("\t", str(self.h5_file_path))#This is the file name location
            #print("\t", str(h5file[_].name))#This is the path name within the file, doesn't include the file name, includes the leaf
            branch = QTreeWidgetItem([str(h5file[_].name).split('/')[-1],
                                      str(self.h5_file_path),
                                      str(h5file[_].name)])
            tree_root.addChild(branch)
            if 	isinstance(h5file[_],h5py.Group):
                self.add_branch(branch,h5file[_])
    def remove_file(self, flag=None):
        if flag=='refresh':
            i = self.file_array.index(self.tree.currentItem().text(1))
            top_file = self.tree.topLevelItem(i)
            removed_item = top_file
        else:
            removed_item = self.tree.currentItem()
            top_file = self.tree.topLevelItem(self.tree.indexOfTopLevelItem(removed_item))
        print("This belongs to the file:", removed_item.text(1))
        if(removed_item != top_file):
            alert = QMessageBox()
            alert.setText("This isn't a top level file!")
            alert.setIcon(2) #2 signifies to put a ! for warning
            alert.exec()
        else:
            filename_to_remove = ( removed_item.text(1) ).split('/')[-1]
            self.file_array.remove(filename_to_remove)
            children = removed_item.takeChildren()
            for c in children:
                self.tree.removeItemWidget(c, 0)
            self.tree.takeTopLevelItem(self.tree.indexOfTopLevelItem(removed_item))
    def create_file(self):
        filename = QFileDialog.getSaveFileName(self, 'Create File', "", filter="h5py Files (*.h5)")
        hf = h5py.File(filename[0], 'w')
        hf.close()
        return filename[0] 

    def copy_data(self):
        print('copying data woot')
        to_copy = self.tree.currentItem()
        self.source_filename = to_copy.text(1)
        self.source_item_path = to_copy.text(2)

    def paste_data(self, destination_filename, destination_path, mainWin):
        try:
            print("Copying from", self.source_filename) 
        except:
            alert = QMessageBox()
            alert.setText("You haven't copied any data yet!")
            alert.setIcon(2) #2 signifies to put a ! for warning
            alert.exec()
            return
        source = h5py.File(self.source_filename, 'r')
        sink = h5py.File(destination_filename, 'r+')
        copied = np.array(source.get(self.source_item_path) )
        print("here is the destination path:", destination_path)
        #Note that in notebooks mode='a' works but in script it does not
        if len(destination_path) > 0:
            item_string = destination_path#.split('/')[:-1]
            #item_string = ''.join(item_string)
            print("group is", item_string)
            group = sink.create_group(item_string)
            group.create_dataset(self.source_item_path.split('/')[-1], data=copied)
        else:
            sink.create_dataset(self.source_item_path.split('/')[-1], data=copied)
        source.close()
        sink.close()
        try:
            self.remove_file('refresh')
            mainWin.initiate_file_open(destination_filename)
        except:
            alert = QMessageBox()
            alert.setText("You need to manually refresh the file by removing and then reopening. This will be automated in the future.")
            alert.exec()
           

    def create_key(self, filename, path, mainWin):
        key, filled_key = QInputDialog.getText(self,'Input Dialog', 'Key Name')
        sink = h5py.File(filename, 'r+')
        key = path + '/' + key
        print("This is where the group should go:", key)
        if filled_key:
            group = sink.create_group(key)
            try:
                self.remove_file('refresh')
                mainWin.initiate_file_open(filename)
            except:
                alert = QMessageBox()
                alert.setText("You need to manually refresh the file by removing and then reopening. This will be automated in the future.")
                alert.exec()
 
        sink.close()


    @pyqtSlot(QTreeWidgetItem,int)
    def onItemClicked(self,item):
        print(self.filename,item.text(2))


class titledTable():
    def __init__(self, title):
        self.title = QLabel(title)
        self.table = QTableWidget()
        self.table.setShowGrid(True)

        self.layout = QVBoxLayout()
        self.layout.addWidget(self.title)
        self.layout.addWidget(self.table)


    def clear(self):
        self.table.setRowCount(0)
        self.table.setColumnCount(0)
        self.table.clear()


    def set_item(self, row, col, item):
        if isinstance(item, str):
            self.table.setItem(row, col,  QTableWidgetItem(item))
        else:
            print("Type Error: Item must be a str")


    def num_cols(self, values):
        value_shape = np.shape(values)
        numcols = 1

        if len(value_shape) > 1:
            numcols = value_shape[1]

        return numcols

